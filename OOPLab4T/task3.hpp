//3.2
void t3()
{}

/*
Задача 3.2. Створити клас MatrixFload (матриця цілих чисел), використовуючи
клас VectorFload. Розробити такі елементи класу:
~ Поля (захищені):
    - VectorFload * FloadArray; // масив
    - int n,size; // розміри матриці
    - int codeError; // код помилки
    - static int num_matrix; // кількість матриць (загально доступних)
    - У змінну стану встановлювати код помилки, коли не вистачає пам'яті, виходить за межі матриці.
~ У класі визначити:
    - конструктори:
    - конструктор без параметрів(FloadArray = nullptr, n =m = codeError = 0);
    - конструктор з одним параметрів типу int size( створює одиничну
    матрицю n=size на size);
    - конструктор із двома параметрами - розміри матриці (виділяє місце та
    ініціалізує значенням нуль);
    - конструктор із трьома параметрами - розміри вектора та значення
    ініціалізації;
    - копіювання;
~ функції доступу до полів : n, sizeта codeError.
~ деструктор (деструктор звільняє пам'ять);
~ перевантаження операцій (операції перевантажувати через функції класу або дружні функції, якщо не вказано яким чином це робити):
    - унарних префіксних та постфіксних ++ та --: одночасно збільшує (зменшує) значення елементів масиву на 1;
    - унарної логічної ! (заперечення): повертає значення true, якщо елементи якщо n та size не дорівнюють – нулю, інакше false;
    - унарний арифметичний - (мінус) : повертає всі елементи масиву класу матриця з протилежним знаком;
    - присвоєння =: копіює матрицю (перевантажити через функцію класу);
    - арифметичних бінарні:
        a. + додавання:
            i. для двох матриць;
            ii. для матриці та скаляра типу int;
            iii. для матриці та скаляра типу float;
        b. - (віднімання):
            i. для двох матриць
            ii. для матриці та скаляра типу int;
            iii. для матриці та скаляра типу float;
            iv. для матриці та скаляра типу double;
        c. *(множення)
            i. для двох матриць,
            ii. для матриці та вектора VectorFload ,
            iii. для матриці та скаляра типу float;
            iv. для матриці та скаляра типу double;
        d. /(ділення)
            i. для матриці та скаляра типу int;
            ii. для матриці та скаляра типу float;
            iii. для матриці та скаляра типу double;
        e. %(остача від ділення)
            i. для матриці та скаляра типу int;
        f. += присвоєння з додаванням:
            i. для двох матриць
            ii. для матриці та скаляра типу float;
            iii. для матриці та скаляра типу double;
        g. -= присвоєння з відніманням:
            i. для двох матриць
            ii. для матриці та скаляра типу float;
            iii. для матриці та скаляра типу double;
        h. *= присвоєння з множенням
            i. для двох матриць,
            ii. для матриці та вектора VectorFload,
            iii. для матриці та скаляра типу float;
            iv. для матриці та скаляра типу double;
        i. /= присвоєння з діленням
            i. для матриці та скаляра типу int;
            ii. для матриці та скаляра типу float;
        j. %= присвоєння з остачею від ділення
            i. для матриці та скаляра типу int;
            ii. для матриці та скаляра типу float;
    - операцій == (рівності) та != (нерівності), функція-операція виконує певні дії над кожною парою елементів матриці за індексом;
    - порівняння (функція-операція виконує певні дії над кожною парою елементів матриць за індексом)
        a. > (більше) для двох матриць;
        b. >= (більше рівне) для двох матриць;
        c. < (менше) для двох матриць;
        d. <= (менше рівне) для двох матриць.
    - операцію індексації [] – функцію, яка звертається до елементу VectorFload, якщо індекс невірний вказує на останній елемент масиву та встановлює код помилки у змінну CodeError.
    - розподілу пам’яті new та delete;
    - виклику функції ();
    - побітові операції зсувів, як дружні операції введення та виведення вектора у потік (перевантажувати через дружні функції)
        a. введення >> (побітовий зсув право) ;
        b. введення << (побітовий зсув ліво);
~ Передбачити можливість підрахунку числа об'єктів даного типу. Перевірити роботу цього класу.
*/